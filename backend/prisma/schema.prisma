// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String?
  name          String
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  billingInfo   BillingInfo? 
  creditCards   CreditCard[]
  purchasedDocs PurchasedDocument[]
}

enum Role {
  ADMIN
  USER
}

model BillingInfo {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  country     String
  phone       String
  street      String
  district    String
  city        String
  state       String
  postalCode  String
  cpf         String
}

model CreditCard {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  name           String
  cardNumber     String
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, cardNumber])
}


model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  image1      String?  // Imagem opcional
  image2      String?  // Imagem opcional
  image3      String?  // Imagem opcional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  document    Document[] @relation("CategoryDocuments")
}


enum ElementType {
  text
  image
  rectangle
  square
  circle
  triangle
  icon
  elementImage
}

enum TextType {
  text
  paragraph
}

model Document {
  id            String      @id @default(uuid())
  title         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pages         Page[]
  preco         Float
  precoDesconto Float?
  descricao     String
  autor         String
  image         String?
  category      Category?   @relation(fields: [categoryId], references: [id], name: "CategoryDocuments")
  categoryId    String?
  purchasedDocs PurchasedDocument[]
}

model Page {
  id         String      @id @default(uuid())
  document   Document    @relation(fields: [documentId], references: [id])
  documentId String
  pageNumber Int 
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  elements   Element[]
}

model Element {
  id             String     @id @default(uuid())
  page           Page       @relation(fields: [pageId], references: [id])
  pageId         String
  type           ElementType
  x              Float
  y              Float
  rotation       Float?     // Opcional
  content        String?    // Para textos
  src            String?    // Para imagens e ícones
  fontSize       Int?       // Para textos
  bold           Boolean?   // Para textos
  italic         Boolean?   // Para textos
  underline      Boolean?   // Para textos
  fill           String?    // Para formas e textos
  width          Float?     // Para imagens e formas
  height         Float?     // Para imagens e formas
  radius         Float?     // Para círculos e triângulos
  textType       TextType?  // Diferencia tipos de texto
  highlightColor String?    // Cor de destaque para textos
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([pageId])
}


model Coupon {
  id            String   @id @default(uuid())
  name          String   @unique
  discountRate  Float    // porcentagem de desconto
  isActive      Boolean  @default(true)
  validUntil    DateTime? // data opcional de validade
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PurchasedDocument {
  id             String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  document       Document  @relation(fields: [documentId], references: [id])
  documentId     String
  exclusionDate  DateTime?
  purchaseDate    DateTime   @default(now())

}